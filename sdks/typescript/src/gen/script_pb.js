// source: script.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.script.CID', null, global);
goog.exportSymbol('proto.script.DBKey', null, global);
goog.exportSymbol('proto.script.DBRecord', null, global);
goog.exportSymbol('proto.script.DHTKey', null, global);
goog.exportSymbol('proto.script.DHTRecord', null, global);
goog.exportSymbol('proto.script.Data', null, global);
goog.exportSymbol('proto.script.DeployScriptRequest', null, global);
goog.exportSymbol('proto.script.DockerImage', null, global);
goog.exportSymbol('proto.script.DockerScript', null, global);
goog.exportSymbol('proto.script.Empty', null, global);
goog.exportSymbol('proto.script.FilePath', null, global);
goog.exportSymbol('proto.script.GossipSubMessage', null, global);
goog.exportSymbol('proto.script.GossipSubMessageID', null, global);
goog.exportSymbol('proto.script.GossipSubRecvMessage', null, global);
goog.exportSymbol('proto.script.ID', null, global);
goog.exportSymbol('proto.script.ListRunningScriptsRequest', null, global);
goog.exportSymbol('proto.script.MeshTopologyEvent', null, global);
goog.exportSymbol('proto.script.Message', null, global);
goog.exportSymbol('proto.script.MessageDebugEvent', null, global);
goog.exportSymbol('proto.script.MessageDebugEvent.EventCase', null, global);
goog.exportSymbol('proto.script.NeighbourEvent', null, global);
goog.exportSymbol('proto.script.NeighbourEvent.EventCase', null, global);
goog.exportSymbol('proto.script.OptionalData', null, global);
goog.exportSymbol('proto.script.OptionalTopic', null, global);
goog.exportSymbol('proto.script.OptionalTopicQuery', null, global);
goog.exportSymbol('proto.script.Peer', null, global);
goog.exportSymbol('proto.script.Peers', null, global);
goog.exportSymbol('proto.script.RecvRequest', null, global);
goog.exportSymbol('proto.script.RequestDebugEvent', null, global);
goog.exportSymbol('proto.script.Response', null, global);
goog.exportSymbol('proto.script.Response.ResponseCase', null, global);
goog.exportSymbol('proto.script.ResponseDebugEvent', null, global);
goog.exportSymbol('proto.script.RunningScript', null, global);
goog.exportSymbol('proto.script.RunningScripts', null, global);
goog.exportSymbol('proto.script.SendRequest', null, global);
goog.exportSymbol('proto.script.SendResponse', null, global);
goog.exportSymbol('proto.script.StopScriptRequest', null, global);
goog.exportSymbol('proto.script.Topic', null, global);
goog.exportSymbol('proto.script.TopicQuery', null, global);
goog.exportSymbol('proto.script.TopicQuery.QueryCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Empty.displayName = 'proto.script.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Data.displayName = 'proto.script.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.OptionalData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.OptionalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.OptionalData.displayName = 'proto.script.OptionalData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.ID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.ID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.ID.displayName = 'proto.script.ID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Peer.displayName = 'proto.script.Peer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Topic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.Topic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Topic.displayName = 'proto.script.Topic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.OptionalTopic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.OptionalTopic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.OptionalTopic.displayName = 'proto.script.OptionalTopic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.TopicQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.script.TopicQuery.oneofGroups_);
};
goog.inherits(proto.script.TopicQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.TopicQuery.displayName = 'proto.script.TopicQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.OptionalTopicQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.OptionalTopicQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.OptionalTopicQuery.displayName = 'proto.script.OptionalTopicQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Message.displayName = 'proto.script.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.SendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.SendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.SendRequest.displayName = 'proto.script.SendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.RecvRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.RecvRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.RecvRequest.displayName = 'proto.script.RecvRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.script.Response.oneofGroups_);
};
goog.inherits(proto.script.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Response.displayName = 'proto.script.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.SendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.SendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.SendResponse.displayName = 'proto.script.SendResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.Peers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script.Peers.repeatedFields_, null);
};
goog.inherits(proto.script.Peers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.Peers.displayName = 'proto.script.Peers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.NeighbourEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.script.NeighbourEvent.oneofGroups_);
};
goog.inherits(proto.script.NeighbourEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.NeighbourEvent.displayName = 'proto.script.NeighbourEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.GossipSubMessageID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.GossipSubMessageID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.GossipSubMessageID.displayName = 'proto.script.GossipSubMessageID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.GossipSubMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.GossipSubMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.GossipSubMessage.displayName = 'proto.script.GossipSubMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.GossipSubRecvMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.GossipSubRecvMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.GossipSubRecvMessage.displayName = 'proto.script.GossipSubRecvMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DHTKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DHTKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DHTKey.displayName = 'proto.script.DHTKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DHTRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DHTRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DHTRecord.displayName = 'proto.script.DHTRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DBRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DBRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DBRecord.displayName = 'proto.script.DBRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DBKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DBKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DBKey.displayName = 'proto.script.DBKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.FilePath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.FilePath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.FilePath.displayName = 'proto.script.FilePath';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.CID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.CID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.CID.displayName = 'proto.script.CID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.MeshTopologyEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.MeshTopologyEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.MeshTopologyEvent.displayName = 'proto.script.MeshTopologyEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.RequestDebugEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.RequestDebugEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.RequestDebugEvent.displayName = 'proto.script.RequestDebugEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.ResponseDebugEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.ResponseDebugEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.ResponseDebugEvent.displayName = 'proto.script.ResponseDebugEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.MessageDebugEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.script.MessageDebugEvent.oneofGroups_);
};
goog.inherits(proto.script.MessageDebugEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.MessageDebugEvent.displayName = 'proto.script.MessageDebugEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DockerImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DockerImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DockerImage.displayName = 'proto.script.DockerImage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DockerScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script.DockerScript.repeatedFields_, null);
};
goog.inherits(proto.script.DockerScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DockerScript.displayName = 'proto.script.DockerScript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.DeployScriptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.DeployScriptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.DeployScriptRequest.displayName = 'proto.script.DeployScriptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.ListRunningScriptsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.ListRunningScriptsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.ListRunningScriptsRequest.displayName = 'proto.script.ListRunningScriptsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.RunningScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.RunningScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.RunningScript.displayName = 'proto.script.RunningScript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.RunningScripts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script.RunningScripts.repeatedFields_, null);
};
goog.inherits(proto.script.RunningScripts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.RunningScripts.displayName = 'proto.script.RunningScripts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script.StopScriptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script.StopScriptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.script.StopScriptRequest.displayName = 'proto.script.StopScriptRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Empty}
 */
proto.script.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Empty;
  return proto.script.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Empty}
 */
proto.script.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Data}
 */
proto.script.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Data;
  return proto.script.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Data}
 */
proto.script.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes data = 1;
 * @return {string}
 */
proto.script.Data.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.script.Data.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * required bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.script.Data.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.script.Data} returns this
 */
proto.script.Data.prototype.setData = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Data} returns this
 */
proto.script.Data.prototype.clearData = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Data.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.OptionalData.prototype.toObject = function(opt_includeInstance) {
  return proto.script.OptionalData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.OptionalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalData.toObject = function(includeInstance, msg) {
  var f, obj = {
data: (f = msg.getData()) && proto.script.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.OptionalData}
 */
proto.script.OptionalData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.OptionalData;
  return proto.script.OptionalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.OptionalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.OptionalData}
 */
proto.script.OptionalData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.OptionalData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.OptionalData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.OptionalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional Data data = 1;
 * @return {?proto.script.Data}
 */
proto.script.OptionalData.prototype.getData = function() {
  return /** @type{?proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 1));
};


/**
 * @param {?proto.script.Data|undefined} value
 * @return {!proto.script.OptionalData} returns this
*/
proto.script.OptionalData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.OptionalData} returns this
 */
proto.script.OptionalData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.OptionalData.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.ID.prototype.toObject = function(opt_includeInstance) {
  return proto.script.ID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.ID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ID.toObject = function(includeInstance, msg) {
  var f, obj = {
ulid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.ID}
 */
proto.script.ID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.ID;
  return proto.script.ID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.ID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.ID}
 */
proto.script.ID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUlid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.ID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.ID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.ID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string ulid = 1;
 * @return {string}
 */
proto.script.ID.prototype.getUlid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.ID} returns this
 */
proto.script.ID.prototype.setUlid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.ID} returns this
 */
proto.script.ID.prototype.clearUlid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.ID.prototype.hasUlid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
peerId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Peer}
 */
proto.script.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Peer;
  return proto.script.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Peer}
 */
proto.script.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string peer_id = 1;
 * @return {string}
 */
proto.script.Peer.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.Peer} returns this
 */
proto.script.Peer.prototype.setPeerId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Peer} returns this
 */
proto.script.Peer.prototype.clearPeerId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Peer.prototype.hasPeerId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Topic.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Topic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Topic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Topic.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Topic}
 */
proto.script.Topic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Topic;
  return proto.script.Topic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Topic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Topic}
 */
proto.script.Topic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Topic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Topic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Topic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Topic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string topic = 1;
 * @return {string}
 */
proto.script.Topic.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.Topic} returns this
 */
proto.script.Topic.prototype.setTopic = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Topic} returns this
 */
proto.script.Topic.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Topic.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.OptionalTopic.prototype.toObject = function(opt_includeInstance) {
  return proto.script.OptionalTopic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.OptionalTopic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalTopic.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: (f = msg.getTopic()) && proto.script.Topic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.OptionalTopic}
 */
proto.script.OptionalTopic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.OptionalTopic;
  return proto.script.OptionalTopic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.OptionalTopic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.OptionalTopic}
 */
proto.script.OptionalTopic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Topic;
      reader.readMessage(value,proto.script.Topic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.OptionalTopic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.OptionalTopic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.OptionalTopic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalTopic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Topic.serializeBinaryToWriter
    );
  }
};


/**
 * optional Topic topic = 1;
 * @return {?proto.script.Topic}
 */
proto.script.OptionalTopic.prototype.getTopic = function() {
  return /** @type{?proto.script.Topic} */ (
    jspb.Message.getWrapperField(this, proto.script.Topic, 1));
};


/**
 * @param {?proto.script.Topic|undefined} value
 * @return {!proto.script.OptionalTopic} returns this
*/
proto.script.OptionalTopic.prototype.setTopic = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.OptionalTopic} returns this
 */
proto.script.OptionalTopic.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.OptionalTopic.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.script.TopicQuery.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.script.TopicQuery.QueryCase = {
  QUERY_NOT_SET: 0,
  TOPIC: 1,
  REGEX: 2
};

/**
 * @return {proto.script.TopicQuery.QueryCase}
 */
proto.script.TopicQuery.prototype.getQueryCase = function() {
  return /** @type {proto.script.TopicQuery.QueryCase} */(jspb.Message.computeOneofCase(this, proto.script.TopicQuery.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.TopicQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.script.TopicQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.TopicQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.TopicQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: (f = msg.getTopic()) && proto.script.Topic.toObject(includeInstance, f),
regex: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.TopicQuery}
 */
proto.script.TopicQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.TopicQuery;
  return proto.script.TopicQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.TopicQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.TopicQuery}
 */
proto.script.TopicQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Topic;
      reader.readMessage(value,proto.script.Topic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.TopicQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.TopicQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.TopicQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.TopicQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Topic.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Topic topic = 1;
 * @return {?proto.script.Topic}
 */
proto.script.TopicQuery.prototype.getTopic = function() {
  return /** @type{?proto.script.Topic} */ (
    jspb.Message.getWrapperField(this, proto.script.Topic, 1));
};


/**
 * @param {?proto.script.Topic|undefined} value
 * @return {!proto.script.TopicQuery} returns this
*/
proto.script.TopicQuery.prototype.setTopic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.script.TopicQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.TopicQuery} returns this
 */
proto.script.TopicQuery.prototype.clearTopic = function() {
  return this.setTopic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.TopicQuery.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string regex = 2;
 * @return {string}
 */
proto.script.TopicQuery.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.TopicQuery} returns this
 */
proto.script.TopicQuery.prototype.setRegex = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.script.TopicQuery.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.TopicQuery} returns this
 */
proto.script.TopicQuery.prototype.clearRegex = function() {
  return jspb.Message.setOneofField(this, 2, proto.script.TopicQuery.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.TopicQuery.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.OptionalTopicQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.script.OptionalTopicQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.OptionalTopicQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalTopicQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
query: (f = msg.getQuery()) && proto.script.TopicQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.OptionalTopicQuery}
 */
proto.script.OptionalTopicQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.OptionalTopicQuery;
  return proto.script.OptionalTopicQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.OptionalTopicQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.OptionalTopicQuery}
 */
proto.script.OptionalTopicQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.TopicQuery;
      reader.readMessage(value,proto.script.TopicQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.OptionalTopicQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.OptionalTopicQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.OptionalTopicQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.OptionalTopicQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.TopicQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional TopicQuery query = 1;
 * @return {?proto.script.TopicQuery}
 */
proto.script.OptionalTopicQuery.prototype.getQuery = function() {
  return /** @type{?proto.script.TopicQuery} */ (
    jspb.Message.getWrapperField(this, proto.script.TopicQuery, 1));
};


/**
 * @param {?proto.script.TopicQuery|undefined} value
 * @return {!proto.script.OptionalTopicQuery} returns this
*/
proto.script.OptionalTopicQuery.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.OptionalTopicQuery} returns this
 */
proto.script.OptionalTopicQuery.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.OptionalTopicQuery.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
data: (f = msg.getData()) && proto.script.Data.toObject(includeInstance, f),
topic: (f = msg.getTopic()) && proto.script.OptionalTopic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Message}
 */
proto.script.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Message;
  return proto.script.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Message}
 */
proto.script.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.script.OptionalTopic;
      reader.readMessage(value,proto.script.OptionalTopic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.OptionalTopic.serializeBinaryToWriter
    );
  }
};


/**
 * required Data data = 1;
 * @return {!proto.script.Data}
 */
proto.script.Message.prototype.getData = function() {
  return /** @type{!proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 1, 1));
};


/**
 * @param {!proto.script.Data} value
 * @return {!proto.script.Message} returns this
*/
proto.script.Message.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Message} returns this
 */
proto.script.Message.prototype.clearData = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Message.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required OptionalTopic topic = 2;
 * @return {!proto.script.OptionalTopic}
 */
proto.script.Message.prototype.getTopic = function() {
  return /** @type{!proto.script.OptionalTopic} */ (
    jspb.Message.getWrapperField(this, proto.script.OptionalTopic, 2, 1));
};


/**
 * @param {!proto.script.OptionalTopic} value
 * @return {!proto.script.Message} returns this
*/
proto.script.Message.prototype.setTopic = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Message} returns this
 */
proto.script.Message.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Message.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.SendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script.SendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.SendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.SendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f),
msg: (f = msg.getMsg()) && proto.script.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.SendRequest}
 */
proto.script.SendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.SendRequest;
  return proto.script.SendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.SendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.SendRequest}
 */
proto.script.SendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new proto.script.Message;
      reader.readMessage(value,proto.script.Message.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.SendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.SendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.SendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.SendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Message.serializeBinaryToWriter
    );
  }
};


/**
 * required Peer peer = 1;
 * @return {!proto.script.Peer}
 */
proto.script.SendRequest.prototype.getPeer = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.SendRequest} returns this
*/
proto.script.SendRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.SendRequest} returns this
 */
proto.script.SendRequest.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.SendRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Message msg = 2;
 * @return {!proto.script.Message}
 */
proto.script.SendRequest.prototype.getMsg = function() {
  return /** @type{!proto.script.Message} */ (
    jspb.Message.getWrapperField(this, proto.script.Message, 2, 1));
};


/**
 * @param {!proto.script.Message} value
 * @return {!proto.script.SendRequest} returns this
*/
proto.script.SendRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.SendRequest} returns this
 */
proto.script.SendRequest.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.SendRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.RecvRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script.RecvRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.RecvRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RecvRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f),
msg: (f = msg.getMsg()) && proto.script.Message.toObject(includeInstance, f),
seq: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.RecvRequest}
 */
proto.script.RecvRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.RecvRequest;
  return proto.script.RecvRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.RecvRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.RecvRequest}
 */
proto.script.RecvRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new proto.script.Message;
      reader.readMessage(value,proto.script.Message.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.RecvRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.RecvRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.RecvRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RecvRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Message.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * required Peer peer = 1;
 * @return {!proto.script.Peer}
 */
proto.script.RecvRequest.prototype.getPeer = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.RecvRequest} returns this
*/
proto.script.RecvRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RecvRequest} returns this
 */
proto.script.RecvRequest.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RecvRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Message msg = 2;
 * @return {!proto.script.Message}
 */
proto.script.RecvRequest.prototype.getMsg = function() {
  return /** @type{!proto.script.Message} */ (
    jspb.Message.getWrapperField(this, proto.script.Message, 2, 1));
};


/**
 * @param {!proto.script.Message} value
 * @return {!proto.script.RecvRequest} returns this
*/
proto.script.RecvRequest.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RecvRequest} returns this
 */
proto.script.RecvRequest.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RecvRequest.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 seq = 3;
 * @return {number}
 */
proto.script.RecvRequest.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.script.RecvRequest} returns this
 */
proto.script.RecvRequest.prototype.setSeq = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RecvRequest} returns this
 */
proto.script.RecvRequest.prototype.clearSeq = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RecvRequest.prototype.hasSeq = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.script.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.script.Response.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  DATA: 1,
  ERROR: 2
};

/**
 * @return {proto.script.Response.ResponseCase}
 */
proto.script.Response.prototype.getResponseCase = function() {
  return /** @type {proto.script.Response.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.script.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
data: (f = msg.getData()) && proto.script.Data.toObject(includeInstance, f),
error: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Response}
 */
proto.script.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Response;
  return proto.script.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Response}
 */
proto.script.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Data data = 1;
 * @return {?proto.script.Data}
 */
proto.script.Response.prototype.getData = function() {
  return /** @type{?proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 1));
};


/**
 * @param {?proto.script.Data|undefined} value
 * @return {!proto.script.Response} returns this
*/
proto.script.Response.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.script.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.Response} returns this
 */
proto.script.Response.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Response.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.script.Response.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.Response} returns this
 */
proto.script.Response.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.script.Response.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.Response} returns this
 */
proto.script.Response.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.script.Response.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.SendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.script.SendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.SendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.SendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
seq: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
response: (f = msg.getResponse()) && proto.script.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.SendResponse}
 */
proto.script.SendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.SendResponse;
  return proto.script.SendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.SendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.SendResponse}
 */
proto.script.SendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 2:
      var value = new proto.script.Response;
      reader.readMessage(value,proto.script.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.SendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.SendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.SendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.SendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Response.serializeBinaryToWriter
    );
  }
};


/**
 * required uint64 seq = 1;
 * @return {number}
 */
proto.script.SendResponse.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.script.SendResponse} returns this
 */
proto.script.SendResponse.prototype.setSeq = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.SendResponse} returns this
 */
proto.script.SendResponse.prototype.clearSeq = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.SendResponse.prototype.hasSeq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Response response = 2;
 * @return {!proto.script.Response}
 */
proto.script.SendResponse.prototype.getResponse = function() {
  return /** @type{!proto.script.Response} */ (
    jspb.Message.getWrapperField(this, proto.script.Response, 2, 1));
};


/**
 * @param {!proto.script.Response} value
 * @return {!proto.script.SendResponse} returns this
*/
proto.script.SendResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.SendResponse} returns this
 */
proto.script.SendResponse.prototype.clearResponse = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.SendResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script.Peers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.Peers.prototype.toObject = function(opt_includeInstance) {
  return proto.script.Peers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.Peers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Peers.toObject = function(includeInstance, msg) {
  var f, obj = {
peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.script.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.Peers}
 */
proto.script.Peers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.Peers;
  return proto.script.Peers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.Peers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.Peers}
 */
proto.script.Peers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.Peers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.Peers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.Peers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.Peers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Peer peers = 1;
 * @return {!Array<!proto.script.Peer>}
 */
proto.script.Peers.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.script.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script.Peer, 1));
};


/**
 * @param {!Array<!proto.script.Peer>} value
 * @return {!proto.script.Peers} returns this
*/
proto.script.Peers.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.script.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script.Peer}
 */
proto.script.Peers.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.script.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.script.Peers} returns this
 */
proto.script.Peers.prototype.clearPeersList = function() {
  return this.setPeersList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.script.NeighbourEvent.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.script.NeighbourEvent.EventCase = {
  EVENT_NOT_SET: 0,
  INIT: 1,
  DISCOVERED: 2,
  LOST: 3
};

/**
 * @return {proto.script.NeighbourEvent.EventCase}
 */
proto.script.NeighbourEvent.prototype.getEventCase = function() {
  return /** @type {proto.script.NeighbourEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.script.NeighbourEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.NeighbourEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.script.NeighbourEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.NeighbourEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.NeighbourEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
init: (f = msg.getInit()) && proto.script.Peers.toObject(includeInstance, f),
discovered: (f = msg.getDiscovered()) && proto.script.Peer.toObject(includeInstance, f),
lost: (f = msg.getLost()) && proto.script.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.NeighbourEvent}
 */
proto.script.NeighbourEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.NeighbourEvent;
  return proto.script.NeighbourEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.NeighbourEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.NeighbourEvent}
 */
proto.script.NeighbourEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peers;
      reader.readMessage(value,proto.script.Peers.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 2:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setDiscovered(value);
      break;
    case 3:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setLost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.NeighbourEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.NeighbourEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.NeighbourEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.NeighbourEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peers.serializeBinaryToWriter
    );
  }
  f = message.getDiscovered();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getLost();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Peers init = 1;
 * @return {?proto.script.Peers}
 */
proto.script.NeighbourEvent.prototype.getInit = function() {
  return /** @type{?proto.script.Peers} */ (
    jspb.Message.getWrapperField(this, proto.script.Peers, 1));
};


/**
 * @param {?proto.script.Peers|undefined} value
 * @return {!proto.script.NeighbourEvent} returns this
*/
proto.script.NeighbourEvent.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.script.NeighbourEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.NeighbourEvent} returns this
 */
proto.script.NeighbourEvent.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.NeighbourEvent.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Peer discovered = 2;
 * @return {?proto.script.Peer}
 */
proto.script.NeighbourEvent.prototype.getDiscovered = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 2));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.NeighbourEvent} returns this
*/
proto.script.NeighbourEvent.prototype.setDiscovered = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.script.NeighbourEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.NeighbourEvent} returns this
 */
proto.script.NeighbourEvent.prototype.clearDiscovered = function() {
  return this.setDiscovered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.NeighbourEvent.prototype.hasDiscovered = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Peer lost = 3;
 * @return {?proto.script.Peer}
 */
proto.script.NeighbourEvent.prototype.getLost = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 3));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.NeighbourEvent} returns this
*/
proto.script.NeighbourEvent.prototype.setLost = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.script.NeighbourEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.NeighbourEvent} returns this
 */
proto.script.NeighbourEvent.prototype.clearLost = function() {
  return this.setLost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.NeighbourEvent.prototype.hasLost = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.GossipSubMessageID.prototype.toObject = function(opt_includeInstance) {
  return proto.script.GossipSubMessageID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.GossipSubMessageID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubMessageID.toObject = function(includeInstance, msg) {
  var f, obj = {
id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.GossipSubMessageID}
 */
proto.script.GossipSubMessageID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.GossipSubMessageID;
  return proto.script.GossipSubMessageID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.GossipSubMessageID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.GossipSubMessageID}
 */
proto.script.GossipSubMessageID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.GossipSubMessageID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.GossipSubMessageID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.GossipSubMessageID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubMessageID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes id = 1;
 * @return {string}
 */
proto.script.GossipSubMessageID.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.script.GossipSubMessageID.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * required bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.script.GossipSubMessageID.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.script.GossipSubMessageID} returns this
 */
proto.script.GossipSubMessageID.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubMessageID} returns this
 */
proto.script.GossipSubMessageID.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubMessageID.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.GossipSubMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.script.GossipSubMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.GossipSubMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
data: (f = msg.getData()) && proto.script.Data.toObject(includeInstance, f),
topic: (f = msg.getTopic()) && proto.script.Topic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.GossipSubMessage}
 */
proto.script.GossipSubMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.GossipSubMessage;
  return proto.script.GossipSubMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.GossipSubMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.GossipSubMessage}
 */
proto.script.GossipSubMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.script.Topic;
      reader.readMessage(value,proto.script.Topic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.GossipSubMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.GossipSubMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.GossipSubMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Topic.serializeBinaryToWriter
    );
  }
};


/**
 * required Data data = 1;
 * @return {!proto.script.Data}
 */
proto.script.GossipSubMessage.prototype.getData = function() {
  return /** @type{!proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 1, 1));
};


/**
 * @param {!proto.script.Data} value
 * @return {!proto.script.GossipSubMessage} returns this
*/
proto.script.GossipSubMessage.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubMessage} returns this
 */
proto.script.GossipSubMessage.prototype.clearData = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Topic topic = 2;
 * @return {!proto.script.Topic}
 */
proto.script.GossipSubMessage.prototype.getTopic = function() {
  return /** @type{!proto.script.Topic} */ (
    jspb.Message.getWrapperField(this, proto.script.Topic, 2, 1));
};


/**
 * @param {!proto.script.Topic} value
 * @return {!proto.script.GossipSubMessage} returns this
*/
proto.script.GossipSubMessage.prototype.setTopic = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubMessage} returns this
 */
proto.script.GossipSubMessage.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubMessage.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.GossipSubRecvMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.script.GossipSubRecvMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.GossipSubRecvMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubRecvMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
propagationSource: (f = msg.getPropagationSource()) && proto.script.Peer.toObject(includeInstance, f),
source: (f = msg.getSource()) && proto.script.Peer.toObject(includeInstance, f),
msg: (f = msg.getMsg()) && proto.script.GossipSubMessage.toObject(includeInstance, f),
msgId: (f = msg.getMsgId()) && proto.script.GossipSubMessageID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.GossipSubRecvMessage}
 */
proto.script.GossipSubRecvMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.GossipSubRecvMessage;
  return proto.script.GossipSubRecvMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.GossipSubRecvMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.GossipSubRecvMessage}
 */
proto.script.GossipSubRecvMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPropagationSource(value);
      break;
    case 2:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = new proto.script.GossipSubMessage;
      reader.readMessage(value,proto.script.GossipSubMessage.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 4:
      var value = new proto.script.GossipSubMessageID;
      reader.readMessage(value,proto.script.GossipSubMessageID.deserializeBinaryFromReader);
      msg.setMsgId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.GossipSubRecvMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.GossipSubRecvMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.GossipSubRecvMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.GossipSubRecvMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropagationSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.script.GossipSubMessage.serializeBinaryToWriter
    );
  }
  f = message.getMsgId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.script.GossipSubMessageID.serializeBinaryToWriter
    );
  }
};


/**
 * required Peer propagation_source = 1;
 * @return {!proto.script.Peer}
 */
proto.script.GossipSubRecvMessage.prototype.getPropagationSource = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.GossipSubRecvMessage} returns this
*/
proto.script.GossipSubRecvMessage.prototype.setPropagationSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubRecvMessage} returns this
 */
proto.script.GossipSubRecvMessage.prototype.clearPropagationSource = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubRecvMessage.prototype.hasPropagationSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Peer source = 2;
 * @return {?proto.script.Peer}
 */
proto.script.GossipSubRecvMessage.prototype.getSource = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 2));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.GossipSubRecvMessage} returns this
*/
proto.script.GossipSubRecvMessage.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.GossipSubRecvMessage} returns this
 */
proto.script.GossipSubRecvMessage.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubRecvMessage.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required GossipSubMessage msg = 3;
 * @return {!proto.script.GossipSubMessage}
 */
proto.script.GossipSubRecvMessage.prototype.getMsg = function() {
  return /** @type{!proto.script.GossipSubMessage} */ (
    jspb.Message.getWrapperField(this, proto.script.GossipSubMessage, 3, 1));
};


/**
 * @param {!proto.script.GossipSubMessage} value
 * @return {!proto.script.GossipSubRecvMessage} returns this
*/
proto.script.GossipSubRecvMessage.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubRecvMessage} returns this
 */
proto.script.GossipSubRecvMessage.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubRecvMessage.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required GossipSubMessageID msg_id = 4;
 * @return {!proto.script.GossipSubMessageID}
 */
proto.script.GossipSubRecvMessage.prototype.getMsgId = function() {
  return /** @type{!proto.script.GossipSubMessageID} */ (
    jspb.Message.getWrapperField(this, proto.script.GossipSubMessageID, 4, 1));
};


/**
 * @param {!proto.script.GossipSubMessageID} value
 * @return {!proto.script.GossipSubRecvMessage} returns this
*/
proto.script.GossipSubRecvMessage.prototype.setMsgId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.GossipSubRecvMessage} returns this
 */
proto.script.GossipSubRecvMessage.prototype.clearMsgId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.GossipSubRecvMessage.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DHTKey.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DHTKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DHTKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DHTKey.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: (f = msg.getTopic()) && proto.script.Topic.toObject(includeInstance, f),
key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DHTKey}
 */
proto.script.DHTKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DHTKey;
  return proto.script.DHTKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DHTKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DHTKey}
 */
proto.script.DHTKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Topic;
      reader.readMessage(value,proto.script.Topic.deserializeBinaryFromReader);
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DHTKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DHTKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DHTKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DHTKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Topic.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required Topic topic = 1;
 * @return {!proto.script.Topic}
 */
proto.script.DHTKey.prototype.getTopic = function() {
  return /** @type{!proto.script.Topic} */ (
    jspb.Message.getWrapperField(this, proto.script.Topic, 1, 1));
};


/**
 * @param {!proto.script.Topic} value
 * @return {!proto.script.DHTKey} returns this
*/
proto.script.DHTKey.prototype.setTopic = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DHTKey} returns this
 */
proto.script.DHTKey.prototype.clearTopic = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DHTKey.prototype.hasTopic = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes key = 2;
 * @return {string}
 */
proto.script.DHTKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.script.DHTKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * required bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.script.DHTKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.script.DHTKey} returns this
 */
proto.script.DHTKey.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DHTKey} returns this
 */
proto.script.DHTKey.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DHTKey.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DHTRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DHTRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DHTRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DHTRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
key: (f = msg.getKey()) && proto.script.DHTKey.toObject(includeInstance, f),
value: (f = msg.getValue()) && proto.script.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DHTRecord}
 */
proto.script.DHTRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DHTRecord;
  return proto.script.DHTRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DHTRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DHTRecord}
 */
proto.script.DHTRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.DHTKey;
      reader.readMessage(value,proto.script.DHTKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DHTRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DHTRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DHTRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DHTRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.DHTKey.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
};


/**
 * required DHTKey key = 1;
 * @return {!proto.script.DHTKey}
 */
proto.script.DHTRecord.prototype.getKey = function() {
  return /** @type{!proto.script.DHTKey} */ (
    jspb.Message.getWrapperField(this, proto.script.DHTKey, 1, 1));
};


/**
 * @param {!proto.script.DHTKey} value
 * @return {!proto.script.DHTRecord} returns this
*/
proto.script.DHTRecord.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DHTRecord} returns this
 */
proto.script.DHTRecord.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DHTRecord.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Data value = 2;
 * @return {!proto.script.Data}
 */
proto.script.DHTRecord.prototype.getValue = function() {
  return /** @type{!proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 2, 1));
};


/**
 * @param {!proto.script.Data} value
 * @return {!proto.script.DHTRecord} returns this
*/
proto.script.DHTRecord.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DHTRecord} returns this
 */
proto.script.DHTRecord.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DHTRecord.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DBRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DBRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DBRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DBRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
value: (f = msg.getValue()) && proto.script.Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DBRecord}
 */
proto.script.DBRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DBRecord;
  return proto.script.DBRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DBRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DBRecord}
 */
proto.script.DBRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.script.Data;
      reader.readMessage(value,proto.script.Data.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DBRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DBRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DBRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DBRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Data.serializeBinaryToWriter
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.script.DBRecord.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.DBRecord} returns this
 */
proto.script.DBRecord.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DBRecord} returns this
 */
proto.script.DBRecord.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DBRecord.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Data value = 2;
 * @return {!proto.script.Data}
 */
proto.script.DBRecord.prototype.getValue = function() {
  return /** @type{!proto.script.Data} */ (
    jspb.Message.getWrapperField(this, proto.script.Data, 2, 1));
};


/**
 * @param {!proto.script.Data} value
 * @return {!proto.script.DBRecord} returns this
*/
proto.script.DBRecord.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DBRecord} returns this
 */
proto.script.DBRecord.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DBRecord.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DBKey.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DBKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DBKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DBKey.toObject = function(includeInstance, msg) {
  var f, obj = {
key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DBKey}
 */
proto.script.DBKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DBKey;
  return proto.script.DBKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DBKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DBKey}
 */
proto.script.DBKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DBKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DBKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DBKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DBKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.script.DBKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.DBKey} returns this
 */
proto.script.DBKey.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DBKey} returns this
 */
proto.script.DBKey.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DBKey.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.FilePath.prototype.toObject = function(opt_includeInstance) {
  return proto.script.FilePath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.FilePath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.FilePath.toObject = function(includeInstance, msg) {
  var f, obj = {
path: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.FilePath}
 */
proto.script.FilePath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.FilePath;
  return proto.script.FilePath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.FilePath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.FilePath}
 */
proto.script.FilePath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.FilePath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.FilePath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.FilePath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.FilePath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string path = 1;
 * @return {string}
 */
proto.script.FilePath.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.FilePath} returns this
 */
proto.script.FilePath.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.FilePath} returns this
 */
proto.script.FilePath.prototype.clearPath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.FilePath.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.CID.prototype.toObject = function(opt_includeInstance) {
  return proto.script.CID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.CID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.CID.toObject = function(includeInstance, msg) {
  var f, obj = {
hash: msg.getHash_asB64(),
id: (f = msg.getId()) && proto.script.ID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.CID}
 */
proto.script.CID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.CID;
  return proto.script.CID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.CID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.CID}
 */
proto.script.CID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.script.ID;
      reader.readMessage(value,proto.script.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.CID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.CID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.CID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.CID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.ID.serializeBinaryToWriter
    );
  }
};


/**
 * required bytes hash = 1;
 * @return {string}
 */
proto.script.CID.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.script.CID.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * required bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.script.CID.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.script.CID} returns this
 */
proto.script.CID.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.CID} returns this
 */
proto.script.CID.prototype.clearHash = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.CID.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ID id = 2;
 * @return {!proto.script.ID}
 */
proto.script.CID.prototype.getId = function() {
  return /** @type{!proto.script.ID} */ (
    jspb.Message.getWrapperField(this, proto.script.ID, 2, 1));
};


/**
 * @param {!proto.script.ID} value
 * @return {!proto.script.CID} returns this
*/
proto.script.CID.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.CID} returns this
 */
proto.script.CID.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.CID.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.MeshTopologyEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.script.MeshTopologyEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.MeshTopologyEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.MeshTopologyEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f),
event: (f = msg.getEvent()) && proto.script.NeighbourEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.MeshTopologyEvent}
 */
proto.script.MeshTopologyEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.MeshTopologyEvent;
  return proto.script.MeshTopologyEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.MeshTopologyEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.MeshTopologyEvent}
 */
proto.script.MeshTopologyEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new proto.script.NeighbourEvent;
      reader.readMessage(value,proto.script.NeighbourEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.MeshTopologyEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.MeshTopologyEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.MeshTopologyEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.MeshTopologyEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.NeighbourEvent.serializeBinaryToWriter
    );
  }
};


/**
 * required Peer peer = 1;
 * @return {!proto.script.Peer}
 */
proto.script.MeshTopologyEvent.prototype.getPeer = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.MeshTopologyEvent} returns this
*/
proto.script.MeshTopologyEvent.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.MeshTopologyEvent} returns this
 */
proto.script.MeshTopologyEvent.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MeshTopologyEvent.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required NeighbourEvent event = 2;
 * @return {!proto.script.NeighbourEvent}
 */
proto.script.MeshTopologyEvent.prototype.getEvent = function() {
  return /** @type{!proto.script.NeighbourEvent} */ (
    jspb.Message.getWrapperField(this, proto.script.NeighbourEvent, 2, 1));
};


/**
 * @param {!proto.script.NeighbourEvent} value
 * @return {!proto.script.MeshTopologyEvent} returns this
*/
proto.script.MeshTopologyEvent.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.MeshTopologyEvent} returns this
 */
proto.script.MeshTopologyEvent.prototype.clearEvent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MeshTopologyEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.RequestDebugEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.script.RequestDebugEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.RequestDebugEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RequestDebugEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.script.ID.toObject(includeInstance, f),
receiver: (f = msg.getReceiver()) && proto.script.Peer.toObject(includeInstance, f),
msg: (f = msg.getMsg()) && proto.script.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.RequestDebugEvent}
 */
proto.script.RequestDebugEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.RequestDebugEvent;
  return proto.script.RequestDebugEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.RequestDebugEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.RequestDebugEvent}
 */
proto.script.RequestDebugEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.ID;
      reader.readMessage(value,proto.script.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    case 3:
      var value = new proto.script.Message;
      reader.readMessage(value,proto.script.Message.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.RequestDebugEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.RequestDebugEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.RequestDebugEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RequestDebugEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.ID.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.script.Message.serializeBinaryToWriter
    );
  }
};


/**
 * required ID id = 1;
 * @return {!proto.script.ID}
 */
proto.script.RequestDebugEvent.prototype.getId = function() {
  return /** @type{!proto.script.ID} */ (
    jspb.Message.getWrapperField(this, proto.script.ID, 1, 1));
};


/**
 * @param {!proto.script.ID} value
 * @return {!proto.script.RequestDebugEvent} returns this
*/
proto.script.RequestDebugEvent.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RequestDebugEvent} returns this
 */
proto.script.RequestDebugEvent.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RequestDebugEvent.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Peer receiver = 2;
 * @return {!proto.script.Peer}
 */
proto.script.RequestDebugEvent.prototype.getReceiver = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 2, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.RequestDebugEvent} returns this
*/
proto.script.RequestDebugEvent.prototype.setReceiver = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RequestDebugEvent} returns this
 */
proto.script.RequestDebugEvent.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RequestDebugEvent.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Message msg = 3;
 * @return {!proto.script.Message}
 */
proto.script.RequestDebugEvent.prototype.getMsg = function() {
  return /** @type{!proto.script.Message} */ (
    jspb.Message.getWrapperField(this, proto.script.Message, 3, 1));
};


/**
 * @param {!proto.script.Message} value
 * @return {!proto.script.RequestDebugEvent} returns this
*/
proto.script.RequestDebugEvent.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RequestDebugEvent} returns this
 */
proto.script.RequestDebugEvent.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RequestDebugEvent.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.ResponseDebugEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.script.ResponseDebugEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.ResponseDebugEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ResponseDebugEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
reqId: (f = msg.getReqId()) && proto.script.ID.toObject(includeInstance, f),
response: (f = msg.getResponse()) && proto.script.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.ResponseDebugEvent}
 */
proto.script.ResponseDebugEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.ResponseDebugEvent;
  return proto.script.ResponseDebugEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.ResponseDebugEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.ResponseDebugEvent}
 */
proto.script.ResponseDebugEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.ID;
      reader.readMessage(value,proto.script.ID.deserializeBinaryFromReader);
      msg.setReqId(value);
      break;
    case 2:
      var value = new proto.script.Response;
      reader.readMessage(value,proto.script.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.ResponseDebugEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.ResponseDebugEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.ResponseDebugEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ResponseDebugEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.ID.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Response.serializeBinaryToWriter
    );
  }
};


/**
 * required ID req_id = 1;
 * @return {!proto.script.ID}
 */
proto.script.ResponseDebugEvent.prototype.getReqId = function() {
  return /** @type{!proto.script.ID} */ (
    jspb.Message.getWrapperField(this, proto.script.ID, 1, 1));
};


/**
 * @param {!proto.script.ID} value
 * @return {!proto.script.ResponseDebugEvent} returns this
*/
proto.script.ResponseDebugEvent.prototype.setReqId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.ResponseDebugEvent} returns this
 */
proto.script.ResponseDebugEvent.prototype.clearReqId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.ResponseDebugEvent.prototype.hasReqId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Response response = 2;
 * @return {!proto.script.Response}
 */
proto.script.ResponseDebugEvent.prototype.getResponse = function() {
  return /** @type{!proto.script.Response} */ (
    jspb.Message.getWrapperField(this, proto.script.Response, 2, 1));
};


/**
 * @param {!proto.script.Response} value
 * @return {!proto.script.ResponseDebugEvent} returns this
*/
proto.script.ResponseDebugEvent.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.ResponseDebugEvent} returns this
 */
proto.script.ResponseDebugEvent.prototype.clearResponse = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.ResponseDebugEvent.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.script.MessageDebugEvent.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.script.MessageDebugEvent.EventCase = {
  EVENT_NOT_SET: 0,
  REQ: 2,
  RES: 3,
  GOS: 4
};

/**
 * @return {proto.script.MessageDebugEvent.EventCase}
 */
proto.script.MessageDebugEvent.prototype.getEventCase = function() {
  return /** @type {proto.script.MessageDebugEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.script.MessageDebugEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.MessageDebugEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.script.MessageDebugEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.MessageDebugEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.MessageDebugEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
sender: (f = msg.getSender()) && proto.script.Peer.toObject(includeInstance, f),
req: (f = msg.getReq()) && proto.script.RequestDebugEvent.toObject(includeInstance, f),
res: (f = msg.getRes()) && proto.script.ResponseDebugEvent.toObject(includeInstance, f),
gos: (f = msg.getGos()) && proto.script.GossipSubMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.MessageDebugEvent}
 */
proto.script.MessageDebugEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.MessageDebugEvent;
  return proto.script.MessageDebugEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.MessageDebugEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.MessageDebugEvent}
 */
proto.script.MessageDebugEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 2:
      var value = new proto.script.RequestDebugEvent;
      reader.readMessage(value,proto.script.RequestDebugEvent.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    case 3:
      var value = new proto.script.ResponseDebugEvent;
      reader.readMessage(value,proto.script.ResponseDebugEvent.deserializeBinaryFromReader);
      msg.setRes(value);
      break;
    case 4:
      var value = new proto.script.GossipSubMessage;
      reader.readMessage(value,proto.script.GossipSubMessage.deserializeBinaryFromReader);
      msg.setGos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.MessageDebugEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.MessageDebugEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.MessageDebugEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.MessageDebugEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.RequestDebugEvent.serializeBinaryToWriter
    );
  }
  f = message.getRes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.script.ResponseDebugEvent.serializeBinaryToWriter
    );
  }
  f = message.getGos();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.script.GossipSubMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required Peer sender = 1;
 * @return {!proto.script.Peer}
 */
proto.script.MessageDebugEvent.prototype.getSender = function() {
  return /** @type{!proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1, 1));
};


/**
 * @param {!proto.script.Peer} value
 * @return {!proto.script.MessageDebugEvent} returns this
*/
proto.script.MessageDebugEvent.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.MessageDebugEvent} returns this
 */
proto.script.MessageDebugEvent.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MessageDebugEvent.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestDebugEvent req = 2;
 * @return {?proto.script.RequestDebugEvent}
 */
proto.script.MessageDebugEvent.prototype.getReq = function() {
  return /** @type{?proto.script.RequestDebugEvent} */ (
    jspb.Message.getWrapperField(this, proto.script.RequestDebugEvent, 2));
};


/**
 * @param {?proto.script.RequestDebugEvent|undefined} value
 * @return {!proto.script.MessageDebugEvent} returns this
*/
proto.script.MessageDebugEvent.prototype.setReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.script.MessageDebugEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.MessageDebugEvent} returns this
 */
proto.script.MessageDebugEvent.prototype.clearReq = function() {
  return this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MessageDebugEvent.prototype.hasReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseDebugEvent res = 3;
 * @return {?proto.script.ResponseDebugEvent}
 */
proto.script.MessageDebugEvent.prototype.getRes = function() {
  return /** @type{?proto.script.ResponseDebugEvent} */ (
    jspb.Message.getWrapperField(this, proto.script.ResponseDebugEvent, 3));
};


/**
 * @param {?proto.script.ResponseDebugEvent|undefined} value
 * @return {!proto.script.MessageDebugEvent} returns this
*/
proto.script.MessageDebugEvent.prototype.setRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.script.MessageDebugEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.MessageDebugEvent} returns this
 */
proto.script.MessageDebugEvent.prototype.clearRes = function() {
  return this.setRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MessageDebugEvent.prototype.hasRes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GossipSubMessage gos = 4;
 * @return {?proto.script.GossipSubMessage}
 */
proto.script.MessageDebugEvent.prototype.getGos = function() {
  return /** @type{?proto.script.GossipSubMessage} */ (
    jspb.Message.getWrapperField(this, proto.script.GossipSubMessage, 4));
};


/**
 * @param {?proto.script.GossipSubMessage|undefined} value
 * @return {!proto.script.MessageDebugEvent} returns this
*/
proto.script.MessageDebugEvent.prototype.setGos = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.script.MessageDebugEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.MessageDebugEvent} returns this
 */
proto.script.MessageDebugEvent.prototype.clearGos = function() {
  return this.setGos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.MessageDebugEvent.prototype.hasGos = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DockerImage.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DockerImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DockerImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DockerImage.toObject = function(includeInstance, msg) {
  var f, obj = {
name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DockerImage}
 */
proto.script.DockerImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DockerImage;
  return proto.script.DockerImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DockerImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DockerImage}
 */
proto.script.DockerImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DockerImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DockerImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DockerImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DockerImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.script.DockerImage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.DockerImage} returns this
 */
proto.script.DockerImage.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DockerImage} returns this
 */
proto.script.DockerImage.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DockerImage.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script.DockerScript.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DockerScript.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DockerScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DockerScript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DockerScript.toObject = function(includeInstance, msg) {
  var f, obj = {
image: (f = msg.getImage()) && proto.script.DockerImage.toObject(includeInstance, f),
portsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DockerScript}
 */
proto.script.DockerScript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DockerScript;
  return proto.script.DockerScript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DockerScript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DockerScript}
 */
proto.script.DockerScript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.DockerImage;
      reader.readMessage(value,proto.script.DockerImage.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPorts(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DockerScript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DockerScript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DockerScript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DockerScript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.DockerImage.serializeBinaryToWriter
    );
  }
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
};


/**
 * required DockerImage image = 1;
 * @return {!proto.script.DockerImage}
 */
proto.script.DockerScript.prototype.getImage = function() {
  return /** @type{!proto.script.DockerImage} */ (
    jspb.Message.getWrapperField(this, proto.script.DockerImage, 1, 1));
};


/**
 * @param {!proto.script.DockerImage} value
 * @return {!proto.script.DockerScript} returns this
*/
proto.script.DockerScript.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DockerScript} returns this
 */
proto.script.DockerScript.prototype.clearImage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DockerScript.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 ports = 2;
 * @return {!Array<number>}
 */
proto.script.DockerScript.prototype.getPortsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.script.DockerScript} returns this
 */
proto.script.DockerScript.prototype.setPortsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.script.DockerScript} returns this
 */
proto.script.DockerScript.prototype.addPorts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.script.DockerScript} returns this
 */
proto.script.DockerScript.prototype.clearPortsList = function() {
  return this.setPortsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.DeployScriptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script.DeployScriptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.DeployScriptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DeployScriptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
script: (f = msg.getScript()) && proto.script.DockerScript.toObject(includeInstance, f),
local: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f),
persistent: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.DeployScriptRequest}
 */
proto.script.DeployScriptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.DeployScriptRequest;
  return proto.script.DeployScriptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.DeployScriptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.DeployScriptRequest}
 */
proto.script.DeployScriptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.DockerScript;
      reader.readMessage(value,proto.script.DockerScript.deserializeBinaryFromReader);
      msg.setScript(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocal(value);
      break;
    case 3:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.DeployScriptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.DeployScriptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.DeployScriptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.DeployScriptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScript();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.DockerScript.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required DockerScript script = 1;
 * @return {!proto.script.DockerScript}
 */
proto.script.DeployScriptRequest.prototype.getScript = function() {
  return /** @type{!proto.script.DockerScript} */ (
    jspb.Message.getWrapperField(this, proto.script.DockerScript, 1, 1));
};


/**
 * @param {!proto.script.DockerScript} value
 * @return {!proto.script.DeployScriptRequest} returns this
*/
proto.script.DeployScriptRequest.prototype.setScript = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.clearScript = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.hasScript = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool local = 2;
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.getLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.setLocal = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.clearLocal = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.hasLocal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Peer peer = 3;
 * @return {?proto.script.Peer}
 */
proto.script.DeployScriptRequest.prototype.getPeer = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 3));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.DeployScriptRequest} returns this
*/
proto.script.DeployScriptRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool persistent = 4;
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.setPersistent = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.DeployScriptRequest} returns this
 */
proto.script.DeployScriptRequest.prototype.clearPersistent = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.DeployScriptRequest.prototype.hasPersistent = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.ListRunningScriptsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script.ListRunningScriptsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.ListRunningScriptsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ListRunningScriptsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.ListRunningScriptsRequest}
 */
proto.script.ListRunningScriptsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.ListRunningScriptsRequest;
  return proto.script.ListRunningScriptsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.ListRunningScriptsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.ListRunningScriptsRequest}
 */
proto.script.ListRunningScriptsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.ListRunningScriptsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.ListRunningScriptsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.ListRunningScriptsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.ListRunningScriptsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Peer peer = 1;
 * @return {?proto.script.Peer}
 */
proto.script.ListRunningScriptsRequest.prototype.getPeer = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 1));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.ListRunningScriptsRequest} returns this
*/
proto.script.ListRunningScriptsRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.ListRunningScriptsRequest} returns this
 */
proto.script.ListRunningScriptsRequest.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.ListRunningScriptsRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.RunningScript.prototype.toObject = function(opt_includeInstance) {
  return proto.script.RunningScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.RunningScript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RunningScript.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.script.ID.toObject(includeInstance, f),
image: (f = msg.getImage()) && proto.script.DockerImage.toObject(includeInstance, f),
name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.RunningScript}
 */
proto.script.RunningScript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.RunningScript;
  return proto.script.RunningScript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.RunningScript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.RunningScript}
 */
proto.script.RunningScript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.ID;
      reader.readMessage(value,proto.script.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.script.DockerImage;
      reader.readMessage(value,proto.script.DockerImage.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.RunningScript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.RunningScript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.RunningScript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RunningScript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.ID.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.DockerImage.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required ID id = 1;
 * @return {!proto.script.ID}
 */
proto.script.RunningScript.prototype.getId = function() {
  return /** @type{!proto.script.ID} */ (
    jspb.Message.getWrapperField(this, proto.script.ID, 1, 1));
};


/**
 * @param {!proto.script.ID} value
 * @return {!proto.script.RunningScript} returns this
*/
proto.script.RunningScript.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RunningScript} returns this
 */
proto.script.RunningScript.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RunningScript.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required DockerImage image = 2;
 * @return {!proto.script.DockerImage}
 */
proto.script.RunningScript.prototype.getImage = function() {
  return /** @type{!proto.script.DockerImage} */ (
    jspb.Message.getWrapperField(this, proto.script.DockerImage, 2, 1));
};


/**
 * @param {!proto.script.DockerImage} value
 * @return {!proto.script.RunningScript} returns this
*/
proto.script.RunningScript.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RunningScript} returns this
 */
proto.script.RunningScript.prototype.clearImage = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RunningScript.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.script.RunningScript.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.script.RunningScript} returns this
 */
proto.script.RunningScript.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.RunningScript} returns this
 */
proto.script.RunningScript.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.RunningScript.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script.RunningScripts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.RunningScripts.prototype.toObject = function(opt_includeInstance) {
  return proto.script.RunningScripts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.RunningScripts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RunningScripts.toObject = function(includeInstance, msg) {
  var f, obj = {
scriptsList: jspb.Message.toObjectList(msg.getScriptsList(),
    proto.script.RunningScript.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.RunningScripts}
 */
proto.script.RunningScripts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.RunningScripts;
  return proto.script.RunningScripts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.RunningScripts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.RunningScripts}
 */
proto.script.RunningScripts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.RunningScript;
      reader.readMessage(value,proto.script.RunningScript.deserializeBinaryFromReader);
      msg.addScripts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.RunningScripts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.RunningScripts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.RunningScripts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.RunningScripts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.script.RunningScript.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RunningScript scripts = 1;
 * @return {!Array<!proto.script.RunningScript>}
 */
proto.script.RunningScripts.prototype.getScriptsList = function() {
  return /** @type{!Array<!proto.script.RunningScript>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script.RunningScript, 1));
};


/**
 * @param {!Array<!proto.script.RunningScript>} value
 * @return {!proto.script.RunningScripts} returns this
*/
proto.script.RunningScripts.prototype.setScriptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.script.RunningScript=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script.RunningScript}
 */
proto.script.RunningScripts.prototype.addScripts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.script.RunningScript, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.script.RunningScripts} returns this
 */
proto.script.RunningScripts.prototype.clearScriptsList = function() {
  return this.setScriptsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script.StopScriptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script.StopScriptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script.StopScriptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.StopScriptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.script.ID.toObject(includeInstance, f),
peer: (f = msg.getPeer()) && proto.script.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script.StopScriptRequest}
 */
proto.script.StopScriptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script.StopScriptRequest;
  return proto.script.StopScriptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script.StopScriptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script.StopScriptRequest}
 */
proto.script.StopScriptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script.ID;
      reader.readMessage(value,proto.script.ID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.script.Peer;
      reader.readMessage(value,proto.script.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script.StopScriptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script.StopScriptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script.StopScriptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script.StopScriptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.script.ID.serializeBinaryToWriter
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * required ID id = 1;
 * @return {!proto.script.ID}
 */
proto.script.StopScriptRequest.prototype.getId = function() {
  return /** @type{!proto.script.ID} */ (
    jspb.Message.getWrapperField(this, proto.script.ID, 1, 1));
};


/**
 * @param {!proto.script.ID} value
 * @return {!proto.script.StopScriptRequest} returns this
*/
proto.script.StopScriptRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.script.StopScriptRequest} returns this
 */
proto.script.StopScriptRequest.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.StopScriptRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Peer peer = 2;
 * @return {?proto.script.Peer}
 */
proto.script.StopScriptRequest.prototype.getPeer = function() {
  return /** @type{?proto.script.Peer} */ (
    jspb.Message.getWrapperField(this, proto.script.Peer, 2));
};


/**
 * @param {?proto.script.Peer|undefined} value
 * @return {!proto.script.StopScriptRequest} returns this
*/
proto.script.StopScriptRequest.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.script.StopScriptRequest} returns this
 */
proto.script.StopScriptRequest.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script.StopScriptRequest.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.script);

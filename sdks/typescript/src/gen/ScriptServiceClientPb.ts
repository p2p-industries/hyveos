/**
 * @fileoverview gRPC-Web generated client stub for script
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.1
// source: script.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as script_pb from './script_pb'; // proto import: "script.proto"


export class ReqRespClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSend = new grpcWeb.MethodDescriptor(
    '/script.ReqResp/Send',
    grpcWeb.MethodType.UNARY,
    script_pb.SendRequest,
    script_pb.Response,
    (request: script_pb.SendRequest) => {
      return request.serializeBinary();
    },
    script_pb.Response.deserializeBinary
  );

  send(
    request: script_pb.SendRequest,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Response>;

  send(
    request: script_pb.SendRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Response) => void): grpcWeb.ClientReadableStream<script_pb.Response>;

  send(
    request: script_pb.SendRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.ReqResp/Send',
        request,
        metadata || {},
        this.methodDescriptorSend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.ReqResp/Send',
    request,
    metadata || {},
    this.methodDescriptorSend);
  }

  methodDescriptorRecv = new grpcWeb.MethodDescriptor(
    '/script.ReqResp/Recv',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.OptionalTopicQuery,
    script_pb.RecvRequest,
    (request: script_pb.OptionalTopicQuery) => {
      return request.serializeBinary();
    },
    script_pb.RecvRequest.deserializeBinary
  );

  recv(
    request: script_pb.OptionalTopicQuery,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.RecvRequest> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.ReqResp/Recv',
      request,
      metadata || {},
      this.methodDescriptorRecv);
  }

  methodDescriptorRespond = new grpcWeb.MethodDescriptor(
    '/script.ReqResp/Respond',
    grpcWeb.MethodType.UNARY,
    script_pb.SendResponse,
    script_pb.Empty,
    (request: script_pb.SendResponse) => {
      return request.serializeBinary();
    },
    script_pb.Empty.deserializeBinary
  );

  respond(
    request: script_pb.SendResponse,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Empty>;

  respond(
    request: script_pb.SendResponse,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void): grpcWeb.ClientReadableStream<script_pb.Empty>;

  respond(
    request: script_pb.SendResponse,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.ReqResp/Respond',
        request,
        metadata || {},
        this.methodDescriptorRespond,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.ReqResp/Respond',
    request,
    metadata || {},
    this.methodDescriptorRespond);
  }

}

export class DiscoveryClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSubscribeEvents = new grpcWeb.MethodDescriptor(
    '/script.Discovery/SubscribeEvents',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.Empty,
    script_pb.NeighbourEvent,
    (request: script_pb.Empty) => {
      return request.serializeBinary();
    },
    script_pb.NeighbourEvent.deserializeBinary
  );

  subscribeEvents(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.NeighbourEvent> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.Discovery/SubscribeEvents',
      request,
      metadata || {},
      this.methodDescriptorSubscribeEvents);
  }

  methodDescriptorGetOwnId = new grpcWeb.MethodDescriptor(
    '/script.Discovery/GetOwnId',
    grpcWeb.MethodType.UNARY,
    script_pb.Empty,
    script_pb.Peer,
    (request: script_pb.Empty) => {
      return request.serializeBinary();
    },
    script_pb.Peer.deserializeBinary
  );

  getOwnId(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Peer>;

  getOwnId(
    request: script_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Peer) => void): grpcWeb.ClientReadableStream<script_pb.Peer>;

  getOwnId(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Peer) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.Discovery/GetOwnId',
        request,
        metadata || {},
        this.methodDescriptorGetOwnId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.Discovery/GetOwnId',
    request,
    metadata || {},
    this.methodDescriptorGetOwnId);
  }

}

export class GossipSubClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSubscribe = new grpcWeb.MethodDescriptor(
    '/script.GossipSub/Subscribe',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.Topic,
    script_pb.GossipSubRecvMessage,
    (request: script_pb.Topic) => {
      return request.serializeBinary();
    },
    script_pb.GossipSubRecvMessage.deserializeBinary
  );

  subscribe(
    request: script_pb.Topic,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.GossipSubRecvMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.GossipSub/Subscribe',
      request,
      metadata || {},
      this.methodDescriptorSubscribe);
  }

  methodDescriptorPublish = new grpcWeb.MethodDescriptor(
    '/script.GossipSub/Publish',
    grpcWeb.MethodType.UNARY,
    script_pb.GossipSubMessage,
    script_pb.GossipSubMessageID,
    (request: script_pb.GossipSubMessage) => {
      return request.serializeBinary();
    },
    script_pb.GossipSubMessageID.deserializeBinary
  );

  publish(
    request: script_pb.GossipSubMessage,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.GossipSubMessageID>;

  publish(
    request: script_pb.GossipSubMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.GossipSubMessageID) => void): grpcWeb.ClientReadableStream<script_pb.GossipSubMessageID>;

  publish(
    request: script_pb.GossipSubMessage,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.GossipSubMessageID) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.GossipSub/Publish',
        request,
        metadata || {},
        this.methodDescriptorPublish,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.GossipSub/Publish',
    request,
    metadata || {},
    this.methodDescriptorPublish);
  }

}

export class DHTClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPutRecord = new grpcWeb.MethodDescriptor(
    '/script.DHT/PutRecord',
    grpcWeb.MethodType.UNARY,
    script_pb.DHTRecord,
    script_pb.Empty,
    (request: script_pb.DHTRecord) => {
      return request.serializeBinary();
    },
    script_pb.Empty.deserializeBinary
  );

  putRecord(
    request: script_pb.DHTRecord,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Empty>;

  putRecord(
    request: script_pb.DHTRecord,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void): grpcWeb.ClientReadableStream<script_pb.Empty>;

  putRecord(
    request: script_pb.DHTRecord,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.DHT/PutRecord',
        request,
        metadata || {},
        this.methodDescriptorPutRecord,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.DHT/PutRecord',
    request,
    metadata || {},
    this.methodDescriptorPutRecord);
  }

  methodDescriptorGetRecord = new grpcWeb.MethodDescriptor(
    '/script.DHT/GetRecord',
    grpcWeb.MethodType.UNARY,
    script_pb.DHTKey,
    script_pb.OptionalData,
    (request: script_pb.DHTKey) => {
      return request.serializeBinary();
    },
    script_pb.OptionalData.deserializeBinary
  );

  getRecord(
    request: script_pb.DHTKey,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.OptionalData>;

  getRecord(
    request: script_pb.DHTKey,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void): grpcWeb.ClientReadableStream<script_pb.OptionalData>;

  getRecord(
    request: script_pb.DHTKey,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.DHT/GetRecord',
        request,
        metadata || {},
        this.methodDescriptorGetRecord,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.DHT/GetRecord',
    request,
    metadata || {},
    this.methodDescriptorGetRecord);
  }

  methodDescriptorProvide = new grpcWeb.MethodDescriptor(
    '/script.DHT/Provide',
    grpcWeb.MethodType.UNARY,
    script_pb.DHTKey,
    script_pb.Empty,
    (request: script_pb.DHTKey) => {
      return request.serializeBinary();
    },
    script_pb.Empty.deserializeBinary
  );

  provide(
    request: script_pb.DHTKey,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Empty>;

  provide(
    request: script_pb.DHTKey,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void): grpcWeb.ClientReadableStream<script_pb.Empty>;

  provide(
    request: script_pb.DHTKey,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.DHT/Provide',
        request,
        metadata || {},
        this.methodDescriptorProvide,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.DHT/Provide',
    request,
    metadata || {},
    this.methodDescriptorProvide);
  }

  methodDescriptorGetProviders = new grpcWeb.MethodDescriptor(
    '/script.DHT/GetProviders',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.DHTKey,
    script_pb.Peer,
    (request: script_pb.DHTKey) => {
      return request.serializeBinary();
    },
    script_pb.Peer.deserializeBinary
  );

  getProviders(
    request: script_pb.DHTKey,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.Peer> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.DHT/GetProviders',
      request,
      metadata || {},
      this.methodDescriptorGetProviders);
  }

}

export class DBClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPut = new grpcWeb.MethodDescriptor(
    '/script.DB/Put',
    grpcWeb.MethodType.UNARY,
    script_pb.DBRecord,
    script_pb.OptionalData,
    (request: script_pb.DBRecord) => {
      return request.serializeBinary();
    },
    script_pb.OptionalData.deserializeBinary
  );

  put(
    request: script_pb.DBRecord,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.OptionalData>;

  put(
    request: script_pb.DBRecord,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void): grpcWeb.ClientReadableStream<script_pb.OptionalData>;

  put(
    request: script_pb.DBRecord,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.DB/Put',
        request,
        metadata || {},
        this.methodDescriptorPut,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.DB/Put',
    request,
    metadata || {},
    this.methodDescriptorPut);
  }

  methodDescriptorGet = new grpcWeb.MethodDescriptor(
    '/script.DB/Get',
    grpcWeb.MethodType.UNARY,
    script_pb.DBKey,
    script_pb.OptionalData,
    (request: script_pb.DBKey) => {
      return request.serializeBinary();
    },
    script_pb.OptionalData.deserializeBinary
  );

  get(
    request: script_pb.DBKey,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.OptionalData>;

  get(
    request: script_pb.DBKey,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void): grpcWeb.ClientReadableStream<script_pb.OptionalData>;

  get(
    request: script_pb.DBKey,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.OptionalData) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.DB/Get',
        request,
        metadata || {},
        this.methodDescriptorGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.DB/Get',
    request,
    metadata || {},
    this.methodDescriptorGet);
  }

}

export class FileTransferClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPublishFile = new grpcWeb.MethodDescriptor(
    '/script.FileTransfer/PublishFile',
    grpcWeb.MethodType.UNARY,
    script_pb.FilePath,
    script_pb.CID,
    (request: script_pb.FilePath) => {
      return request.serializeBinary();
    },
    script_pb.CID.deserializeBinary
  );

  publishFile(
    request: script_pb.FilePath,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.CID>;

  publishFile(
    request: script_pb.FilePath,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.CID) => void): grpcWeb.ClientReadableStream<script_pb.CID>;

  publishFile(
    request: script_pb.FilePath,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.CID) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.FileTransfer/PublishFile',
        request,
        metadata || {},
        this.methodDescriptorPublishFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.FileTransfer/PublishFile',
    request,
    metadata || {},
    this.methodDescriptorPublishFile);
  }

  methodDescriptorGetFile = new grpcWeb.MethodDescriptor(
    '/script.FileTransfer/GetFile',
    grpcWeb.MethodType.UNARY,
    script_pb.CID,
    script_pb.FilePath,
    (request: script_pb.CID) => {
      return request.serializeBinary();
    },
    script_pb.FilePath.deserializeBinary
  );

  getFile(
    request: script_pb.CID,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.FilePath>;

  getFile(
    request: script_pb.CID,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.FilePath) => void): grpcWeb.ClientReadableStream<script_pb.FilePath>;

  getFile(
    request: script_pb.CID,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.FilePath) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.FileTransfer/GetFile',
        request,
        metadata || {},
        this.methodDescriptorGetFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.FileTransfer/GetFile',
    request,
    metadata || {},
    this.methodDescriptorGetFile);
  }

}

export class DebugClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSubscribeMeshTopology = new grpcWeb.MethodDescriptor(
    '/script.Debug/SubscribeMeshTopology',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.Empty,
    script_pb.MeshTopologyEvent,
    (request: script_pb.Empty) => {
      return request.serializeBinary();
    },
    script_pb.MeshTopologyEvent.deserializeBinary
  );

  subscribeMeshTopology(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.MeshTopologyEvent> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.Debug/SubscribeMeshTopology',
      request,
      metadata || {},
      this.methodDescriptorSubscribeMeshTopology);
  }

  methodDescriptorSubscribeMessages = new grpcWeb.MethodDescriptor(
    '/script.Debug/SubscribeMessages',
    grpcWeb.MethodType.SERVER_STREAMING,
    script_pb.Empty,
    script_pb.MessageDebugEvent,
    (request: script_pb.Empty) => {
      return request.serializeBinary();
    },
    script_pb.MessageDebugEvent.deserializeBinary
  );

  subscribeMessages(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<script_pb.MessageDebugEvent> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/script.Debug/SubscribeMessages',
      request,
      metadata || {},
      this.methodDescriptorSubscribeMessages);
  }

}

export class ScriptingClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorDeployScript = new grpcWeb.MethodDescriptor(
    '/script.Scripting/DeployScript',
    grpcWeb.MethodType.UNARY,
    script_pb.DeployScriptRequest,
    script_pb.ID,
    (request: script_pb.DeployScriptRequest) => {
      return request.serializeBinary();
    },
    script_pb.ID.deserializeBinary
  );

  deployScript(
    request: script_pb.DeployScriptRequest,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.ID>;

  deployScript(
    request: script_pb.DeployScriptRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.ID) => void): grpcWeb.ClientReadableStream<script_pb.ID>;

  deployScript(
    request: script_pb.DeployScriptRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.ID) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.Scripting/DeployScript',
        request,
        metadata || {},
        this.methodDescriptorDeployScript,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.Scripting/DeployScript',
    request,
    metadata || {},
    this.methodDescriptorDeployScript);
  }

  methodDescriptorListRunningScripts = new grpcWeb.MethodDescriptor(
    '/script.Scripting/ListRunningScripts',
    grpcWeb.MethodType.UNARY,
    script_pb.ListRunningScriptsRequest,
    script_pb.RunningScripts,
    (request: script_pb.ListRunningScriptsRequest) => {
      return request.serializeBinary();
    },
    script_pb.RunningScripts.deserializeBinary
  );

  listRunningScripts(
    request: script_pb.ListRunningScriptsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.RunningScripts>;

  listRunningScripts(
    request: script_pb.ListRunningScriptsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.RunningScripts) => void): grpcWeb.ClientReadableStream<script_pb.RunningScripts>;

  listRunningScripts(
    request: script_pb.ListRunningScriptsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.RunningScripts) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.Scripting/ListRunningScripts',
        request,
        metadata || {},
        this.methodDescriptorListRunningScripts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.Scripting/ListRunningScripts',
    request,
    metadata || {},
    this.methodDescriptorListRunningScripts);
  }

  methodDescriptorStopScript = new grpcWeb.MethodDescriptor(
    '/script.Scripting/StopScript',
    grpcWeb.MethodType.UNARY,
    script_pb.StopScriptRequest,
    script_pb.Empty,
    (request: script_pb.StopScriptRequest) => {
      return request.serializeBinary();
    },
    script_pb.Empty.deserializeBinary
  );

  stopScript(
    request: script_pb.StopScriptRequest,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.Empty>;

  stopScript(
    request: script_pb.StopScriptRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void): grpcWeb.ClientReadableStream<script_pb.Empty>;

  stopScript(
    request: script_pb.StopScriptRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.Scripting/StopScript',
        request,
        metadata || {},
        this.methodDescriptorStopScript,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.Scripting/StopScript',
    request,
    metadata || {},
    this.methodDescriptorStopScript);
  }

  methodDescriptorGetOwnId = new grpcWeb.MethodDescriptor(
    '/script.Scripting/GetOwnId',
    grpcWeb.MethodType.UNARY,
    script_pb.Empty,
    script_pb.ID,
    (request: script_pb.Empty) => {
      return request.serializeBinary();
    },
    script_pb.ID.deserializeBinary
  );

  getOwnId(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<script_pb.ID>;

  getOwnId(
    request: script_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: script_pb.ID) => void): grpcWeb.ClientReadableStream<script_pb.ID>;

  getOwnId(
    request: script_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: script_pb.ID) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/script.Scripting/GetOwnId',
        request,
        metadata || {},
        this.methodDescriptorGetOwnId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/script.Scripting/GetOwnId',
    request,
    metadata || {},
    this.methodDescriptorGetOwnId);
  }

}


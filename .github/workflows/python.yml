name: Python SDK

on:
  workflow_dispatch:
  push:
    branches: [ "main", "python-sdk" ]
    paths:
      - '**.py'
      - '**.proto'
  pull_request:
    branches: [ "main", "python-sdk" ]
    paths:
      - '**.py'
      - '**.proto'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        working-directory: sdks/python/p2pindustries

      - name: Check formatting is correct 
        working-directory: sdks/python/p2pindustries
        run: poetry run ruff format --check

      - name: Check linting is correct
        working-directory: sdks/python/p2pindustries
        run: poetry run ruff check

      - name: Check if compiled protobuf is up-to-date
        run:  mkdir proto-check && poetry run python -m grpc_tools.protoc -I./protos --python_out=./proto-check --pyi_out=./proto-check --grpc_python_out=./proto-check ./protos/script.proto && diff -r ./proto-check ./sdks/python/p2pindustries/grpc
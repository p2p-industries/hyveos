name: Rust

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*-*-rust"
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: read
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ github.event_name != 'pull_request' }}
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'protos/**'
              - 'sdks/rust/**'
              - 'crates/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'deny.toml'
              - '.rustfmt.toml'
              - '.github/workflows/rust.yml'

  test:
    name: Test ${{ matrix.crate }} on ${{ matrix.target }}
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    needs: [changes, gather_crates]
    if: >
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        crate: ${{ fromJSON(needs.gather_crates.outputs.members) }}
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    env:
      CRATE: ${{ matrix.crate }}
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cross compile linker
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: awalsh128/cache-apt-pkgs-action@a6c3917cc929dd0345bfb2d3feaf9101823370ad # v1.4.2
        with:
          packages: gcc-aarch64-linux-gnu
          version: 1.0

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.crate }}--${{ matrix.target }}
          cache-provider: "buildjet"

      - name: Run complete check
        run: cargo check --package "$CRATE" --all-features --target "$TARGET" --tests

      - name: Run complete build
        run: cargo build --package "$CRATE" --all-features --target "$TARGET" --tests

      - name: Run all tests
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: cargo test --package "$CRATE" --all-features --target "$TARGET"

      - name: Run batman no mdns check
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && matrix.crate == 'hyved' }}
        run: cargo check --package "$CRATE" -F batman --target "$TARGET" --tests

      - name: Run batman no mdns test
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && matrix.crate == 'hyved' }}
        run: cargo test --package "$CRATE" -F batman --target "$TARGET"

      - name: Check if we compile without any features activated
        run: cargo check --package "$CRATE" --no-default-features --target "$TARGET" --tests

      - uses: taiki-e/cache-cargo-install-action@44857e0ff6d186da8fe49f9ac9eedae5bbc37a93 # v1
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          tool: tomlq

      - name: Extract version from manifest
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -e -r '.packages[] | select(.name == "'"$CRATE"'") | .version')
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV

  clippy:
    name: Run clippy
    runs-on: ubuntu-24.04
    needs: changes
    if: >
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a
        with:
          toolchain: stable
          components: clippy

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run clippy without all features
        run: cargo clippy --no-default-features -- -D warnings

      - name: Run clippy with all features
        run: cargo clippy --all-features -- -D warnings

  rustfmt:
    runs-on: ubuntu-24.04
    needs: changes
    if: >
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a
        with:
          toolchain: stable
          components: rustfmt

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0

      - name: Check formatting
        run: cargo fmt -- --check

  ensure-lockfile-uptodate:
    name: Ensure that `Cargo.lock` is up-to-date
    runs-on: ubuntu-24.04
    needs: changes
    if: >
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
      - run: cargo metadata --locked --format-version=1 > /dev/null

  gather_crates:
    name: Gather crates
    runs-on: ubuntu-24.04
    needs: changes
    if: >
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    outputs:
      members: ${{ steps.cargo-metadata.outputs.members }}
    steps:
      - uses: actions/checkout@v4

      - id: cargo-metadata
        run: |
          WORKSPACE_MEMBERS=$(cargo metadata --format-version=1 --no-deps | jq -c '.packages | map(.name)')
          echo "members=${WORKSPACE_MEMBERS}" >> $GITHUB_OUTPUT

  cargo-deny:
    name: Enforce dependency licenses and advisories
    runs-on: ubuntu-24.04
    needs: [changes, ensure-lockfile-uptodate]
    if: > 
      needs.changes.outputs.rust == 'true'
      || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - uses: taiki-e/install-action@c2bb13fe14454ce1be6b630075c6abb37d14be12
        with:
          tool: cargo-deny@0.14.24

      - name: Run cargo deny
        run: cargo deny --all-features check advisories bans licenses sources

  test-completed:
    name: Wait for test completion (Rust)
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    needs: [changes, test, clippy, rustfmt, cargo-deny, ensure-lockfile-uptodate, gather_crates]
    if: always()
    steps:
      - name: Fail if prerequisite failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
      - run: echo "Complete"

  publish:
    name: Publish Crate to crates.io
    runs-on: ubuntu-24.04
    needs:
      - ensure-lockfile-uptodate
      - changes
      - rustfmt
      - clippy
      - cargo-deny
    if: >
      startsWith(github.ref, 'refs/tags/v')
      && endsWith(github.ref_name, '-rust')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a
        with:
          toolchain: stable

      - name: Parse crate name from tag
        id: parse_crate
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          TAG_STRIPPED="${TAG_NAME#v}"
          TAG_STRIPPED="${TAG_STRIPPED%-rust}"
          
          CRATE_NAME="${TAG_STRIPPED#*-}"
          
          echo "crate_name=${CRATE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Publish to crates.io
        run: cargo publish -p ${{ steps.parse_crate.outputs.crate_name }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

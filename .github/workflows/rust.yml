name: Rust

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test ${{ matrix.crate }} on ${{ matrix.target }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: gather_crates
    strategy:
      fail-fast: false
      matrix:
        crate: ${{ fromJSON(needs.gather_crates.outputs.members) }}
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    env:
      CRATE: ${{ matrix.crate }}
      TARGET: ${{ matrix.target }}
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITSECRET }}

      - name: Install cross compile linker
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: sudo apt-get install gcc-aarch64-linux-gnu
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          shared-key: stable-cache
          save-if: false

      - name: Run complete check
        run: cargo check --package "$CRATE" --all-features --target "$TARGET"

      - name: Run complete build
        run: cargo build --package "$CRATE" --all-features --target "$TARGET"

      - name: Run all tests
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: cargo test --package "$CRATE" --all-features

      - name: Check if we compile without any features activated
        run: cargo build --package "$CRATE" --no-default-features --target "$TARGET"

      - uses: taiki-e/cache-cargo-install-action@924d49e0af41f449f0ad549559bc608ee4653562 # v1
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          tool: tomlq

      - name: Extract version from manifest
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -e -r '.packages[] | select(.name == "'"$CRATE"'") | .version')
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV

      - name: Enforce version `workspace.dependencies` matches latest version
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          SPECIFIED_VERSION=$(tomlq "workspace.dependencies.$CRATE.version" --file ./Cargo.toml)

          echo "Package version: $CRATE_VERSION"
          echo "Specified version: $SPECIFIED_VERSION"

          test "$CRATE_VERSION" = "$SPECIFIED_VERSION" || test "=$CRATE_VERSION" = "$SPECIFIED_VERSION"

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITSECRET }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
    
      - run: cargo clippy --all-features

  rustfmt:
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    steps:
      - uses: actions/checkout@v4
      
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITSECRET }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - name: Check formatting
        run: cargo fmt -- --check

  ensure-lockfile-uptodate:
    name: Ensure that `Cargo.lock` is up-to-date
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    steps:
      - uses: actions/checkout@v4
      
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITSECRET }}

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
      - run: cargo metadata --locked --format-version=1 > /dev/null

  gather_crates:
    name: Gather crates
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    outputs:
      members: ${{ steps.cargo-metadata.outputs.members }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITSECRET }}

      - id: cargo-metadata
        run: |
          WORKSPACE_MEMBERS=$(cargo metadata --format-version=1 --no-deps | jq -c '.packages | map(.name)')
          echo "members=${WORKSPACE_MEMBERS}" >> $GITHUB_OUTPUT

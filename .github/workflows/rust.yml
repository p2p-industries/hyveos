name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test ${{ matrix.crate }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: gather_crates
    strategy:
      fail-fast: false
      matrix:
        crate: ${{ fromJSON(needs.gather_published_crates.outputs.members) }}
    env:
      CRATE: ${{ matrix.crate }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: dtolnay/rust-toolchain@stable

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          shared-key: stable-cache
          save-if: false

      - name: Run complete check
        run: cargo check --package "$CRATE" --all-features

      - name: Run complete build
        run: cargo build --package "$CRATE" --all-features

      - name: Run all tests
        run: cargo test --package "$CRATE" --all-features

      - name: Check if we compile without any features activated
        run: cargo build --package "$CRATE" --no-default-features

      - uses: taiki-e/cache-cargo-install-action@924d49e0af41f449f0ad549559bc608ee4653562 # v1
        with:
          tool: tomlq

      - name: Extract version from manifest
        run: |
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -e -r '.packages[] | select(.name == "'"$CRATE"'") | .version')
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV

      - name: Enforce version `workspace.dependencies` matches latest version
        run: |
          SPECIFIED_VERSION=$(tomlq "workspace.dependencies.$CRATE.version" --file ./Cargo.toml)

          echo "Package version: $CRATE_VERSION"
          echo "Specified version: $SPECIFIED_VERSION"

          test "$CRATE_VERSION" = "$SPECIFIED_VERSION" || test "=$CRATE_VERSION" = "$SPECIFIED_VERSION"

  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust-version: [stable, beta]
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          components: clippy

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      - run: cargo clippy --all-features

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt

      - uses: r7kamura/rust-problem-matchers@2c2f1016021a7455a6b5b4bbae31145f3b3cd83a #v1.4.0

      - name: Check formatting
        run: cargo fmt -- --check

  ensure-lockfile-uptodate:
    name: Ensure that `Cargo.lock` is up-to-date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
      - run: cargo metadata --locked --format-version=1 > /dev/null

  gather_crates:
    name: Gather crates
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.cargo-metadata.outputs.members }}
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - id: cargo-metadata
        run: |
          WORKSPACE_MEMBERS=$(cargo metadata --format-version=1 --no-deps | jq -c '.packages | map(.name)')
          echo "members=${WORKSPACE_MEMBERS}" >> $GITHUB_OUTPUT

  build-and-check-size:
    needs: test 
    if: needs.test.status == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [release, size, perf]
        std: [true, false]
        target: [aarch64-unknown-linux-gnu, x86_64-unknown-linux-gnu]

    env:
      TARGET: ${{ matrix.target }}
      PROFILE: ${{ matrix.profile }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}
          components: rust-src

      - name: Build ${{ matrix.profile }} binary for ${{ matrix.target }} with standard library
        if: ${{ matrix.std }}
        run: cargo +nightly build -Z build-std --profile="$PROFILE" --target="$TARGET" --package engine

      - name: Build ${{ matrix.profile }} binary for ${{ matrix.target }} without standard library
        if: ${{ ! matrix.std }}
        run: cargo +nightly build --profile="$PROFILE" --package engine


      - name: Prepare comment
        id: prep
        shell: bash
        run: |
          SIZE=$(stat --format="%s" target/${{ matrix.target }}/${{ matrix.profile }}/engine)
          echo "::set-output name=comment_body::**Target:** ${{ matrix.target }} **With -Z build-std:** ${{ matrix.std }} **Size:** $SIZE bytes **Profile:** ${{ matrix.profile }}"

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.prep.outputs.comment_body }}

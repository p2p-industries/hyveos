name: Rust

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test ${{ matrix.crate }} on ${{ matrix.target }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: gather_crates
    strategy:
      fail-fast: false
      matrix:
        crate: ${{ fromJSON(needs.gather_crates.outputs.members) }}
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    env:
      CRATE: ${{ matrix.crate }}
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - name: Install cross compile linker
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          shared-key: stable-cache
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run complete check
        run: cargo check --package "$CRATE" --all-features --target "$TARGET" --tests

      - name: Run complete build
        run: cargo build --package "$CRATE" --all-features --target "$TARGET" --tests

      - name: Run all tests
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && matrix.crate != 'docker' }}
        run: cargo test --package "$CRATE" --all-features --target "$TARGET"

      - name: Run batman no mdns check
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && matrix.crate == 'stack' }}
        run: cargo check --package "$CRATE" -F batman --target "$TARGET" --tests

      - name: Run batman no mdns test
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' && matrix.crate == 'stack' }}
        run: cargo test --package "$CRATE" -F batman --target "$TARGET"

      - name: Check if we compile without any features activated
        run: cargo check --package "$CRATE" --no-default-features --target "$TARGET" --tests

      - uses: taiki-e/cache-cargo-install-action@924d49e0af41f449f0ad549559bc608ee4653562 # v1
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          tool: tomlq

      - name: Extract version from manifest
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -e -r '.packages[] | select(.name == "'"$CRATE"'") | .version')
          echo "CRATE_VERSION=$CRATE_VERSION" >> $GITHUB_ENV

  clippy:
    name: Run clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a
        with:
          toolchain: stable
          components: clippy

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - run: cargo clippy --all-features

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a
        with:
          toolchain: stable
          components: rustfmt

      - uses: r7kamura/rust-problem-matchers@9fe7ca9f6550e5d6358e179d451cc25ea6b54f98 # v1.5.0

      - name: Check formatting
        run: cargo fmt -- --check

  ensure-lockfile-uptodate:
    name: Ensure that `Cargo.lock` is up-to-date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
      - run: cargo metadata --locked --format-version=1 > /dev/null

  gather_crates:
    name: Gather crates
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.cargo-metadata.outputs.members }}
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - id: cargo-metadata
        run: |
          WORKSPACE_MEMBERS=$(cargo metadata --format-version=1 --no-deps | jq -c '.packages | map(.name)')
          echo "members=${WORKSPACE_MEMBERS}" >> $GITHUB_OUTPUT

  cargo-deny:
    name: Enforce dependency licenses and advisories
    needs: ensure-lockfile-uptodate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - uses: taiki-e/install-action@c2bb13fe14454ce1be6b630075c6abb37d14be12
        with:
          tool: cargo-deny@0.14.24

      - name: Run cargo deny
        run: cargo deny --all-features check advisories bans licenses sources

  build-debian:
    name: Build debian packages
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - batman-neighbours-daemon
          - stack
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387
        with:
          ssh-private-key: |
            ${{ secrets.GITSECRET }}
            ${{ secrets.GIT_STREAM_SECRET }}

      - uses: taiki-e/cache-cargo-install-action@caa6f48d18d42462f9c30df89e2b4f71a42b7c2c
        with:
          tool: cargo-deb

      - name: Install cross compile linker
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      - name: Build debian binary
        if: ${{ matrix.target != 'aarch64-unknown-linux-gnu' }}
        run: cargo deb -p ${{ matrix.crate }} --target ${{ matrix.target }}

      - name: Build Raspbian binary
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: cargo deb -p ${{ matrix.crate }} --variant raspbian --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.crate }}--${{ matrix.target }}
          path: target/${{ matrix.target }}/debian/*.deb

// Put the basic example for grpc using proto2 here

syntax = "proto2";

package script;


// ----- MESSAGES -----

message Empty {}

message ID {
  required string value = 1;
}

message Message {
  required bytes data = 1;
  optional string topic = 2;
}

message SendRequest {
  required string peer_id = 1;
  required Message msg = 2;
}

message RecvRequest {
  required string peer_id = 1;
  required Message msg = 2;
  required uint64 seq = 3;
}

message Topic {
  required string topic = 1;
}

message Response {
  required bytes data = 1;
}

message SendResponse {
  required uint64 seq = 1;
  required Response response = 2;
}

message Peer {
  required string peer_id = 1;
}

message Peers {
  repeated Peer peers = 1;
}

message NeighbourEvent {
  oneof event {
    Peer discovered = 1;

    Peer lost = 2;
  }
}

message GossipSubMessage {
  required string peer_id = 1;
  required Message msg = 2;
}

message DHTKey {
  required string key = 1;
}

message DHTRecord {
  required DHTKey key = 1;
  optional bytes value = 2;
}

message FilePath {
  required string path = 1;
}

message File {
  required FilePath path = 1;
  required ID cid = 2;
}


// ----- SERVICES -----

service ReqResp {
  rpc Send(SendRequest) returns (Response) {}

  rpc Recv(Empty) returns (stream RecvRequest) {}

  rpc Respond(SendResponse) returns (Empty) {}

  // Multiple scripts on one node: 
  // discriminate listening/sending based on Topics
  rpc Subscribe(Topic) returns (Empty) {}

  rpc Unsubscribe(Topic) returns (Empty) {}
}

service Discovery {
  rpc SubscribeEvents(Empty) returns (stream NeighbourEvent) {}

  rpc GetCurrentNeighbours(Empty) returns (Peers) {}

  rpc GetOwnId(Empty) returns (Peer) {}
}

service GossipSub {
  rpc Subscribe(Topic) returns (Empty) {}

  rpc Unsubscribe(Topic) returns (Empty) {}

  rpc Publish(Message) returns (Empty) {}

  rpc Recv(Empty) returns (stream GossipSubMessage) {}
}

service DHT {
  rpc PutRecord(DHTRecord) returns (Empty) {}

  rpc GetRecord(DHTKey) returns (DHTRecord) {}

  rpc Provide(DHTKey) returns (Empty) {}

  rpc GetProviders(DHTKey) returns (stream Peer) {}
}

service FileTransfer {
  rpc PublishFile(File) returns (Empty) {}

  rpc GetFile(ID) returns (FilePath) {}
}
